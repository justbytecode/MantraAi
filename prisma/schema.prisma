generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  name         String?
  emailVerified DateTime?  @map("email_verified")
  image        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  accounts     Account[]
  sessions     Session[]
  leads        Lead[]
  campaigns    Campaign[]
  integrations Integration[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lead {
  id          String     @id @default(uuid())
  name        String
  email       String?
  phone       String?
  company     String
  score       Float      @default(0.0)
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  outreach    Outreach[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Campaign {
  id          String     @id @default(uuid())
  name        String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  outreach    Outreach[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      String     @default("active")
  metrics     Json?
}

model Outreach {
  id          String    @id @default(uuid())
  leadId      String
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  campaignId  String
  campaign    Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  channel     String
  message     String
  status      String
  sentAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Integration {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  config      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}